apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

// Load keystore
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

// Load apis
def apiStoreProperties = new Properties()
apiStoreProperties.load(new FileInputStream(rootProject.file("apis.properties")))

android {
    compileSdkVersion Integer.parseInt(project.APP_COMPILE_SDK_VERSION)
    buildToolsVersion project.APP_BUILD_TOOL_VERSION

    defaultConfig {


        /*API END POINTS*/
        buildConfigField "String", "API_NEWS", "\"${apiStoreProperties['simple_test_api']}\""
        /*API END POINTS*/

        applicationId "com.rahat.standardapplicationrnd"
        minSdkVersion Integer.parseInt(project.MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.TARGET_SDK_VERSION)
        versionCode Integer.parseInt(project.APP_VERSION_CODE)
        versionName project.APP_VERSION_NAME
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }


    signingConfigs {
        release {
            try {
                storeFile file(keystoreProperties['STORE_FILE'])
                storePassword keystoreProperties['KEYSTORE_PASSWORD']
                keyAlias keystoreProperties['ALIAS']
                keyPassword keystoreProperties['KEY_PASSWORD']
            } catch (exception) {
                exception.printStackTrace()
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            debuggable true

            /*API BASE URLS*/
            buildConfigField "String", "HOST_URL", "\"${apiStoreProperties['debug_base_url']}\""
            /*END API BASE URLS*/

            //crashlytics enable/disable
            //ext.alwaysUpdateBuildId = false
            //png optimization enable/disable
            //aaptOptions.cruncherEnabled = false
            //crunchPngs false
            //multiple apk build enable/disable
            //splits.abi.enable = false
            //splits.density.enable = false
        }
        release {

            /*API BASE URLS*/
            buildConfigField "String", "HOST_URL", "\"${apiStoreProperties['live_base_url']}\""
            /*END API BASE URLS*/

            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}


dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.1'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'


    //google material library
    implementation 'com.google.android.material:material:1.2.1'

    //leak canary
    //debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.1'
    //releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'
    //testImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'


    // compulsory
    //retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    //for retrofit conversion
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    //okhttp interceptor
    implementation 'com.squareup.okhttp3:logging-interceptor:3.13.1'


}